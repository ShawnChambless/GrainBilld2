angular.module('GrainBilld', ['ui.router', 'angular-loading-bar', 'ngCookies'])
.run(["$rootScope", "$http", "$cookies", function($rootScope, $http, $cookies) {
    $rootScope.currentUser = $cookies.getObject('user');
    if($rootScope.currentUser) $rootScope.showLogIn = true;
    else getCurrentUser();

    function getCurrentUser() {
        return $http({
            method: 'GET',
            url: '/api/users/getUser'
        }).then(function(resp) {
            if(resp.data) {
                $cookies.putObject('user', {
                    id: resp.data._id,
                    firstName: resp.data.firstName
                });
                $rootScope.showLogIn = true;
                $rootScope.currentUser = resp.data;
            }
            else return;
        });
    }
}])
.config(["$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('Login');
    $stateProvider
        .state('login', {
            url: '/Login',
            controller: 'loginCtrl',
            templateUrl: 'app/login/loginTmpl.html'
        })
        .state('home', {
            url: '/Home',
            controller: 'homeCtrl',
            templateUrl: 'app/home/homeTmpl.html',
            resolve: {
                getRecipeTotals: ["homeService", function(homeService) {
                    return homeService.getRecipeTotals().then(function(resp) {
                        return resp.data;
                    });
                }],
                getCommunityRecipes: ["communityRecipesService", function(communityRecipesService) {
                    return communityRecipesService.getCommunityRecipes().then(function(resp) {
                        return resp.data;
                    });
                }]
            }
        })
        .state('newBatch', {
            url: '/NewBatch',
            controller: 'newBatchController',
            templateUrl: 'app/newBatch/newBatchTmpl.html',
            resolve: {
                getGrain: ["homeService", function(homeService) {
                    return homeService.getGrain().then(function(resp) {
                        return resp.data;
                    });
                }],
                getHops: ["homeService", function(homeService) {
                    return homeService.getHops().then(function(resp) {
                        return resp.data;
                    });
                }],
                getYeast: ["homeService", function(homeService) {
                    return homeService.getYeast().then(function(resp) {
                        return resp.data;
                    });
                }]
            }
        })
        .state('ingredientInfo', {
            url: '/IngredientInfo',
            templateUrl: 'app/ingredientInfo/ingredientInfoTmpl.html',
            controller: 'ingredientInfoController',
            resolve: {
                getIngredients: ["homeService", function(homeService) {
                    var ingredients = {};
                    return (
                        homeService.getGrain().then(function(resp) {
                            ingredients.grain = resp.data;
                        }),
                        homeService.getHops().then(function(resp) {
                            ingredients.hops = resp.data;
                        }),
                        homeService.getYeast().then(function(resp) {
                            ingredients.yeast = resp.data;
                            return ingredients;
                        })
                    );
                }]
            }
        })
        .state('myRecipes', {
            url: '/MyRecipes/:userId',
            controller: 'myRecipesController',
            templateUrl: 'app/myRecipes/myRecipesTmpl.html',
            resolve: {
                checkUserLoggedIn: ["$state", "$rootScope", "myRecipesService", function($state, $rootScope, myRecipesService) {
                    if($rootScope.currentUser) {
                        return myRecipesService.getRecipes($rootScope.currentUser.id).then(function(resp) {

                            return { recipes: resp.data };
                        }, function(err) {
                            $state.go('home');
                        });
                    }
                    else return;
                }]
            }
        })
        .state('communityRecipes', {
            url: '/CommunityRecipes',
            controller: 'communityRecipesController',
            templateUrl: 'app/CommunityRecipes/communityRecipesTmpl.html',
            resolve: {
                getCommunityRecipes: ["$state", "communityRecipesService", function($state, communityRecipesService) {
                    return communityRecipesService.getCommunityRecipes().then(function(resp) {
                        return { recipes: resp.data };
                    }, function(err) {
                        $state.go('home');
                    });
                }]
            }
        });
}]);

$(document).ready(function() {
  var menuToggle = $('#js-mobile-menu').unbind();
  $('#js-navigation-menu').removeClass("show");

  menuToggle.on('click', function(e) {
    e.preventDefault();
    $('#js-navigation-menu').slideToggle(function(){
      if($('#js-navigation-menu').is(':hidden')) {
        $('#js-navigation-menu').removeAttr('style');
      }
    });
  });
});

angular.module('GrainBilld')
.controller('communityRecipesController', ["$scope", "communityRecipesService", "getCommunityRecipes", "myRecipesService", function($scope, communityRecipesService, getCommunityRecipes, myRecipesService) {
    $scope.recipes = getCommunityRecipes.recipes;
}]);

angular.module('GrainBilld')
.service('communityRecipesService', ["$http", function($http) {

    this.getCommunityRecipes = function() {
        return $http({
            method: 'GET',
            url: '/api/recipes/community'
        });
    };

}]);

angular.module('GrainBilld')
.controller('homeCtrl', ["$scope", "homeService", "$cookies", "getRecipeTotals", "getCommunityRecipes", function($scope, homeService, $cookies, getRecipeTotals, getCommunityRecipes) {
    $scope.totalCount = getRecipeTotals.totalCount;
    $scope.totalCommunity = getRecipeTotals.totalCommunity;
    if(getRecipeTotals.totalCommunity < 2) $scope.recipe = 'recipe';
    else $scope.recipe = 'recipes';

    $scope.communityRecipes = getCommunityRecipes;

}]);

angular.module('GrainBilld')
.service('homeService', ["$http", "$q", function($http, $q) {

    this.getGrain = function() {
        return $http({
            method: 'GET',
            url:    'http://localhost:8080/api/database/ingredients/grain'
        });
    };
    this.getHops = function() {
        return $http({
            method: 'GET',
            url:    'http://localhost:8080/api/database/ingredients/hops'
        });
    };

    this.getYeast = function() {
        return $http({
            method: 'GET',
            url:    'http://localhost:8080/api/database/ingredients/yeast'
        });
    };

    this.getRecipeTotals = function() {
        return $http.get('/api/recipes');
    };

}]);

angular.module('GrainBilld')
.controller('ingredientInfoController', ["$scope", "ingredientInfoService", "getIngredients", function($scope, ingredientInfoService, getIngredients) {

    $scope.grain = getIngredients.grain;
    $scope.hops = getIngredients.hops;
    $scope.yeast = getIngredients.yeast;

    $scope.rotate90 = function(ingredient, id) {
        document.getElementById(ingredient + id).classList.toggle('rotated90');
    };

}]);

angular.module('GrainBilld')
.service('ingredientInfoService', ["$http", function($http) {

}]);

angular.module('GrainBilld')
.controller('loginCtrl', ["$scope", "loginService", "$state", "$rootScope", "$cookies", function($scope, loginService, $state, $rootScope, $cookies) {
    $scope.register = function(firstName, lastName, email, password) {
        loginService.register(firstName, lastName, email, password).success(function(resp) {
            $cookies.putObject('user', {
                id: resp._id,
                firstName: resp.firstName
            });
            $rootScope.currentUser = $cookies.getObject('user');
            $scope.email = $scope.password = '';
            $rootScope.showLogIn = true;
            $scope.showSuccess = true;
            $scope.showError = false;
        }).error(function(err) {
            $scope.showError = true;
        });
    };
    $scope.login = function(email, password) {
        loginService.login(email, password).success(function(resp) {
            $cookies.putObject('user', {
                id: resp._id,
                firstName: resp.firstName
            });
            $rootScope.currentUser = $cookies.getObject('user');
            $scope.email = $scope.password = '';
            $rootScope.showLogIn = true;
            $scope.showSuccess = true;
            $scope.showError = false;
        }).error(function(err) {
            $scope.showError = true;
        });
    };
}]);

angular.module('GrainBilld')
.service('loginService', ["$http", "$state", function($http, $state) {
    this.register = function(firstName, lastName, email, password) {
        return $http({
            method: 'POST',
            url:    'http://localhost:8080/auth/local/signup',
            data: {
                firstName:  firstName,
                lastName:   lastName,
                email:      email,
                password:   password
            }
        }).success(function(resp) {
            $state.go('home');
            return resp.data;
        }).error(function(err) {
            return err;
        });
    };

    this.login = function(email, password) {
        return $http({
            method: 'POST',
            url: 'http://localhost:8080/auth/local/login',
            data: {
                email:      email,
                password:   password
            }
        }).success(function(resp) {
            $state.go('home');
            return resp.data;
        }).error(function(err) {
            return err;
        });
    };
}]);

angular.module('GrainBilld')
.controller('myRecipesController', ["$scope", "myRecipesService", "$rootScope", "checkUserLoggedIn", function($scope, myRecipesService, $rootScope, checkUserLoggedIn) {
    $scope.recipes = checkUserLoggedIn.recipes;
}]);

angular.module('GrainBilld')
.service('myRecipesService', ["$http", function($http) {

    this.getRecipes = function(userId) {
        return $http({
            method: 'GET',
            url: '/api/user/recipes/' + userId
        });
    };

    this.removeRecipe = function(recipeId, userId) {
        return $http({
            method: 'PUT',
            url: '/api/user/recipes/remove',
            data: {
                recipeId: recipeId,
                userId: userId
            }
        }).then(function(resp) {
            return resp.data;
        });
    };

}]);

angular.module('GrainBilld')
.controller('navCtrl', ["$rootScope", "$scope", "$cookies", function($rootScope, $scope, $cookies) {
    $scope.logOut = function() {
        $cookies.remove('user');
    };
}]);

angular.module('GrainBilld')
.directive('editRecipe', ["newBatchService", function(newBatchService) {
    return {
        scope: {
            ingredient: '=',
            ingredientType: '='
        },
        template: '<p>{{ingredient.name}}</p>',
        link: function(scope, elem, attrs) {
            elem.on('click', function() {
                newBatchService.addIngredient(scope.ingredientType, scope.ingredient);
                scope.$apply(scope.grainInRecipe, scope.hopsInRecipe, scope.yeastInRecipe, scope.grainValues, scope.hopsValues, scope.yeastValues);
            });
        }
    };
}]);

angular.module('GrainBilld')
.controller('newBatchController', ["$scope", "newBatchService", "getGrain", "getHops", "getYeast", "$rootScope", "$state", "$timeout", function($scope, newBatchService, getGrain, getHops, getYeast, $rootScope, $state, $timeout) {
    $scope.grainInDb        = getGrain;
    $scope.hopsInDb         = getHops;
    $scope.yeastInDb        = getYeast;
    $scope.grainInRecipe    = newBatchService.grainInRecipe;
    $scope.hopsInRecipe     = newBatchService.hopsInRecipe;
    $scope.yeastInRecipe    = newBatchService.yeastInRecipe;
    $scope.grainValues      = newBatchService.grainValues;
    $scope.hopsValues       = newBatchService.hopsValues;
    $scope.yeastValues      = newBatchService.yeastValues;
    $scope.grains           = 'grain';
    $scope.hopss            = 'hops';
    $scope.yeasts           = 'yeast';
    $scope.recipe           = {};
    $scope.recipe.isPrivate = true;

    $scope.showGrainData = function() {
        $scope.showGrain    = true;
        $scope.showHops     = false;
        $scope.showYeast    = false;
    };

    $scope.showHopsData = function() {
        $scope.showGrain  = false;
        $scope.showHops   = true;
        $scope.showYeast  = false;
    };

    $scope.showYeastData = function() {
        $scope.showGrain    = false;
        $scope.showHops     = false;
        $scope.showYeast    = true;
    };

    $scope.removeGrain = function(index) {
        newBatchService.grainInRecipe.splice(index, 1);
    };

    $scope.removeHops = function(index) {
        newBatchService.hopsInRecipe.splice(index, 1);
    };

    $scope.removeYeast = function(index) {
        newBatchService.yeastInRecipe.splice(index, 1);
    };

    $scope.saveRecipeToUser = function(recipe) {
        var user = $scope.currentUser.id;
        newBatchService.saveRecipeToUser(recipe, user).then(function(resp) {
            console.log(resp);
            $scope.response = resp;
            var flashSuccess = document.getElementById('flashSuccess');
            flashSuccess.classList.toggle('active');
            $timeout(function() {
                flashSuccess.classList.toggle('active');
            }, 3000);
            $scope.showGrain = $scope.showHops = $scope.showYeast = false;
            $scope.recipe = {}; $scope.grainInRecipe = newBatchService.grainInRecipe; $scope.hopsInRecipe = newBatchService.hopsInRecipe; $scope.yeastInRecipe = newBatchService.yeastInRecipe; $scope.grainValues = newBatchService.grainValues; $scope.hopsValues = newBatchService.hopsValues; $scope.yeastValues = newBatchService.yeastValues; $scope.recipe.isPrivate = true;
        }, function(err) {
            var flashError = document.getElementById('flashError');
            flashError.classList.toggle('active');
            $timeout(function() {
                flashError.classList.toggle('active');
            }, 3000);
        });
    };

}]);

angular.module('GrainBilld')
.service('newBatchService', ["$http", function($http) {
    this.grainInRecipe = [];
    this.hopsInRecipe  = [];
    this.yeastInRecipe = [];
    this.grainValues   = { og: 0, fg: 0, srm: 0 };
    this.hopsValues    = { ibu: 0 };
    this.yeastValues   = { attenuation: 0, abv: 0 };

    this.addIngredient = function(ingredientType, ingredient) {
        switch(ingredientType) {
            case 'grain':
                editGrainInRecipe(ingredient, this.grainInRecipe, this.grainValues, this.yeastValues);
                break;
            case 'hops':
                editHopsInRecipe(ingredient, this.hopsInRecipe, this.hopsValues);
                break;
            case 'yeast':
                editYeastInRecipe(ingredient, this.yeastInRecipe, this.yeastValues, this.grainValues);
                break;
        }
    };

    function editGrainInRecipe(grain, arr, grainValues, yeastValues) {
        arr.push({
            name: grain.name,
            lovibond: grain.lovibond,
            sg: ((grain.sg - 1) * 1000).toFixed(1),
            amount: 5,
            description: grain.description
        });
        calcGrainTotals(arr, grainValues, yeastValues);
    }

    function editHopsInRecipe(hops, arr, hopsValues) {
        arr.push({
            name: hops.name,
            alphaAcid: (hops.alphaAcid / 100),
            amount: 1,
            boilTime: 10,
            description: hops.description
        });
        calcHopsTotals(arr, hopsValues);
    }

    function editYeastInRecipe(yeast, arr, yeastValues, grainValues) {
        arr.push({
            name: yeast.name,
            attenuation: (yeast.minimumAttenuation + yeast.maximumAttenuation) / 2,
            description: yeast.description
        });
        calcYeastTotals(arr, yeastValues, grainValues);
    }

    function calcGrainTotals(arr, grainValues, yeastValues) {
        var efficiency = 0.75;
        var batchSize = 5;
        grainValues.og = 0;
        grainValues.fg = 0;
        arr.forEach(function(item) {
            grainValues.og += calcOG(item.sg, item.amount, efficiency);
            grainValues.srm += parseFloat(((item.amount + item.lovibond) / (batchSize * 0.264))/10);
        });
    }

    function calcHopsTotals(arr, hopsValues) {
        hopsValues.ibu = 0;
        arr.forEach(function(item) {
            hopsValues.ibu += calcIBU(item);
        });
    }

    function calcYeastTotals(arr, yeastValues, grainValues) {
        yeastValues.attenuation = 0;
        yeastValues.abv = 0;
        arr.forEach(function(item) {
            yeastValues.attenuation += calcAttenuation(grainValues.og, grainValues.fg);
            grainValues.fg += calcFG(grainValues.og, yeastValues.attenuation);
            yeastValues.abv = calcABV(grainValues.og, grainValues.fg);
        });
    }

    function calcOG(sg, grainAmount, efficiency) {
        var batchSize = 5;
        var og = 1 + (((sg * grainAmount) * efficiency) / batchSize) / 1000;
        return og;
    }

    function calcFG(og, yeastAttenuation) {
        var fg = 1 + ((og * (1 - (yeastAttenuation))) / 1000);
        return fg;
    }

    function calcIBU(hops) {
        var batchSize = 5;
        var utilization = findHopUtilization(hops.boilTime);
        var ibu = parseFloat(((hops.alphaAcid * utilization * 74.89 / batchSize) * 100).toFixed(1));
        return ibu;
    }

    function calcAttenuation(og, fg) {
        var attenuation = ((og - fg) / og);
        return attenuation;
    }

    function calcABV(og, fg) {
        var abv = (og - fg) * 131.25;
        return abv;
    }

    function findHopUtilization (boilTime){
        var hopUtilization = 0;
        if(boilTime === 0) hopUtilization = 0;
        else if (boilTime > 0  && boilTime <= 9)  hopUtilization = 0.05;
        else if (boilTime > 9  && boilTime <= 19) hopUtilization = 0.12;
        else if (boilTime > 19 && boilTime <= 29) hopUtilization = 0.15;
        else if (boilTime > 29 && boilTime <= 44) hopUtilization = 0.19;
        else if (boilTime > 44 && boilTime <= 59) hopUtilization = 0.22;
        else if (boilTime > 59 && boilTime <= 74) hopUtilization = 0.24;
        else if (boilTime > 74) hopUtilization = 0.27;
        return hopUtilization;
    }

    this.saveRecipeToUser = function(recipe, user) {
        return $http({
            method: 'POST',
            url: 'api/users/newRecipe',
            data: {
                recipe: {
                    user: user,
                    name: recipe.name,
                    grain: this.grainInRecipe,
                    hops: this.hopsInRecipe,
                    yeast: this.yeastInRecipe,
                    batchSize: recipe.batchSize,
                    projectedEfficiency: recipe.efficiency,
                    isPrivate: recipe.isPrivate
                }
            }
        }).then(function(resp) {
            return (
                this.grainInRecipe = [],
                this.hopsInRecipe  = [],
                this.yeastInRecipe = [],
                this.grainValues   = { og: 0, fg: 0, srm: 0 },
                this.hopsValues    = { ibu: 0 },
                this.yeastValues   = { attenuation: 0, abv: 0 },
                resp.data
            );
        }.bind(this));
    };
}]);

angular.module('GrainBilld')
.directive('confirmDir', ["myRecipesService", function(myRecipesService) {
    return {
        restrict: 'E',
        templateUrl: 'app/directives/confirmDir/confirmDirTmpl.html',
        link: function(scope, elem, attrs) {
            scope.removeRecipe = function(recipeId, index) {
                myRecipesService.removeRecipe(recipeId).then(function() {
                    scope.recipes.splice(index, 1);
                    scope.showConfirmBox = !scope.showConfirmBox;
                });
            };
        }
    };
}]);
